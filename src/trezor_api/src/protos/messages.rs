// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MessageType {
    MessageType_Initialize = 0,
    MessageType_Ping = 1,
    MessageType_Success = 2,
    MessageType_Failure = 3,
    MessageType_ChangePin = 4,
    MessageType_WipeDevice = 5,
    MessageType_GetEntropy = 9,
    MessageType_Entropy = 10,
    MessageType_LoadDevice = 13,
    MessageType_ResetDevice = 14,
    MessageType_Features = 17,
    MessageType_PinMatrixRequest = 18,
    MessageType_PinMatrixAck = 19,
    MessageType_Cancel = 20,
    MessageType_LockDevice = 24,
    MessageType_ApplySettings = 25,
    MessageType_ButtonRequest = 26,
    MessageType_ButtonAck = 27,
    MessageType_ApplyFlags = 28,
    MessageType_BackupDevice = 34,
    MessageType_EntropyRequest = 35,
    MessageType_EntropyAck = 36,
    MessageType_PassphraseRequest = 41,
    MessageType_PassphraseAck = 42,
    MessageType_RecoveryDevice = 45,
    MessageType_WordRequest = 46,
    MessageType_WordAck = 47,
    MessageType_GetFeatures = 55,
    MessageType_SdProtect = 79,
    MessageType_ChangeWipeCode = 82,
    MessageType_EndSession = 83,
    MessageType_DoPreauthorized = 84,
    MessageType_PreauthorizedRequest = 85,
    MessageType_CancelAuthorization = 86,
    MessageType_RebootToBootloader = 87,
    MessageType_SetU2FCounter = 63,
    MessageType_GetNextU2FCounter = 80,
    MessageType_NextU2FCounter = 81,
    MessageType_Deprecated_PassphraseStateRequest = 77,
    MessageType_Deprecated_PassphraseStateAck = 78,
    MessageType_FirmwareErase = 6,
    MessageType_FirmwareUpload = 7,
    MessageType_FirmwareRequest = 8,
    MessageType_SelfTest = 32,
    MessageType_GetPublicKey = 11,
    MessageType_PublicKey = 12,
    MessageType_SignTx = 15,
    MessageType_TxRequest = 21,
    MessageType_TxAck = 22,
    MessageType_GetAddress = 29,
    MessageType_Address = 30,
    MessageType_SignMessage = 38,
    MessageType_VerifyMessage = 39,
    MessageType_MessageSignature = 40,
    MessageType_GetOwnershipId = 43,
    MessageType_OwnershipId = 44,
    MessageType_GetOwnershipProof = 49,
    MessageType_OwnershipProof = 50,
    MessageType_AuthorizeCoinJoin = 51,
    MessageType_CipherKeyValue = 23,
    MessageType_CipheredKeyValue = 48,
    MessageType_SignIdentity = 53,
    MessageType_SignedIdentity = 54,
    MessageType_GetECDHSessionKey = 61,
    MessageType_ECDHSessionKey = 62,
    MessageType_CosiCommit = 71,
    MessageType_CosiCommitment = 72,
    MessageType_CosiSign = 73,
    MessageType_CosiSignature = 74,
    MessageType_DebugLinkDecision = 100,
    MessageType_DebugLinkGetState = 101,
    MessageType_DebugLinkState = 102,
    MessageType_DebugLinkStop = 103,
    MessageType_DebugLinkLog = 104,
    MessageType_DebugLinkMemoryRead = 110,
    MessageType_DebugLinkMemory = 111,
    MessageType_DebugLinkMemoryWrite = 112,
    MessageType_DebugLinkFlashErase = 113,
    MessageType_DebugLinkLayout = 9001,
    MessageType_DebugLinkReseedRandom = 9002,
    MessageType_DebugLinkRecordScreen = 9003,
    MessageType_DebugLinkEraseSdCard = 9005,
    MessageType_DebugLinkWatchLayout = 9006,
    MessageType_EthereumGetPublicKey = 450,
    MessageType_EthereumPublicKey = 451,
    MessageType_EthereumGetAddress = 56,
    MessageType_EthereumAddress = 57,
    MessageType_EthereumSignTx = 58,
    MessageType_EthereumSignTxEIP1559 = 452,
    MessageType_EthereumTxRequest = 59,
    MessageType_EthereumTxAck = 60,
    MessageType_EthereumSignMessage = 64,
    MessageType_EthereumVerifyMessage = 65,
    MessageType_EthereumMessageSignature = 66,
    MessageType_NEMGetAddress = 67,
    MessageType_NEMAddress = 68,
    MessageType_NEMSignTx = 69,
    MessageType_NEMSignedTx = 70,
    MessageType_NEMDecryptMessage = 75,
    MessageType_NEMDecryptedMessage = 76,
    MessageType_TezosGetAddress = 150,
    MessageType_TezosAddress = 151,
    MessageType_TezosSignTx = 152,
    MessageType_TezosSignedTx = 153,
    MessageType_TezosGetPublicKey = 154,
    MessageType_TezosPublicKey = 155,
    MessageType_StellarSignTx = 202,
    MessageType_StellarTxOpRequest = 203,
    MessageType_StellarGetAddress = 207,
    MessageType_StellarAddress = 208,
    MessageType_StellarCreateAccountOp = 210,
    MessageType_StellarPaymentOp = 211,
    MessageType_StellarPathPaymentOp = 212,
    MessageType_StellarManageOfferOp = 213,
    MessageType_StellarCreatePassiveOfferOp = 214,
    MessageType_StellarSetOptionsOp = 215,
    MessageType_StellarChangeTrustOp = 216,
    MessageType_StellarAllowTrustOp = 217,
    MessageType_StellarAccountMergeOp = 218,
    MessageType_StellarManageDataOp = 220,
    MessageType_StellarBumpSequenceOp = 221,
    MessageType_StellarSignedTx = 230,
    MessageType_CardanoSignTx = 303,
    MessageType_CardanoGetPublicKey = 305,
    MessageType_CardanoPublicKey = 306,
    MessageType_CardanoGetAddress = 307,
    MessageType_CardanoAddress = 308,
    MessageType_CardanoSignedTx = 310,
    MessageType_CardanoSignedTxChunk = 311,
    MessageType_CardanoSignedTxChunkAck = 312,
    MessageType_CardanoTxItemAck = 313,
    MessageType_CardanoTxAuxiliaryDataSupplement = 314,
    MessageType_CardanoTxWitnessRequest = 315,
    MessageType_CardanoTxWitnessResponse = 316,
    MessageType_CardanoTxHostAck = 317,
    MessageType_CardanoTxBodyHash = 318,
    MessageType_CardanoSignTxFinished = 319,
    MessageType_CardanoSignTxInit = 320,
    MessageType_CardanoTxInput = 321,
    MessageType_CardanoTxOutput = 322,
    MessageType_CardanoAssetGroup = 323,
    MessageType_CardanoToken = 324,
    MessageType_CardanoTxCertificate = 325,
    MessageType_CardanoTxWithdrawal = 326,
    MessageType_CardanoTxAuxiliaryData = 327,
    MessageType_CardanoPoolOwner = 328,
    MessageType_CardanoPoolRelayParameters = 329,
    MessageType_RippleGetAddress = 400,
    MessageType_RippleAddress = 401,
    MessageType_RippleSignTx = 402,
    MessageType_RippleSignedTx = 403,
    MessageType_MoneroTransactionInitRequest = 501,
    MessageType_MoneroTransactionInitAck = 502,
    MessageType_MoneroTransactionSetInputRequest = 503,
    MessageType_MoneroTransactionSetInputAck = 504,
    MessageType_MoneroTransactionInputsPermutationRequest = 505,
    MessageType_MoneroTransactionInputsPermutationAck = 506,
    MessageType_MoneroTransactionInputViniRequest = 507,
    MessageType_MoneroTransactionInputViniAck = 508,
    MessageType_MoneroTransactionAllInputsSetRequest = 509,
    MessageType_MoneroTransactionAllInputsSetAck = 510,
    MessageType_MoneroTransactionSetOutputRequest = 511,
    MessageType_MoneroTransactionSetOutputAck = 512,
    MessageType_MoneroTransactionAllOutSetRequest = 513,
    MessageType_MoneroTransactionAllOutSetAck = 514,
    MessageType_MoneroTransactionSignInputRequest = 515,
    MessageType_MoneroTransactionSignInputAck = 516,
    MessageType_MoneroTransactionFinalRequest = 517,
    MessageType_MoneroTransactionFinalAck = 518,
    MessageType_MoneroKeyImageExportInitRequest = 530,
    MessageType_MoneroKeyImageExportInitAck = 531,
    MessageType_MoneroKeyImageSyncStepRequest = 532,
    MessageType_MoneroKeyImageSyncStepAck = 533,
    MessageType_MoneroKeyImageSyncFinalRequest = 534,
    MessageType_MoneroKeyImageSyncFinalAck = 535,
    MessageType_MoneroGetAddress = 540,
    MessageType_MoneroAddress = 541,
    MessageType_MoneroGetWatchKey = 542,
    MessageType_MoneroWatchKey = 543,
    MessageType_DebugMoneroDiagRequest = 546,
    MessageType_DebugMoneroDiagAck = 547,
    MessageType_MoneroGetTxKeyRequest = 550,
    MessageType_MoneroGetTxKeyAck = 551,
    MessageType_MoneroLiveRefreshStartRequest = 552,
    MessageType_MoneroLiveRefreshStartAck = 553,
    MessageType_MoneroLiveRefreshStepRequest = 554,
    MessageType_MoneroLiveRefreshStepAck = 555,
    MessageType_MoneroLiveRefreshFinalRequest = 556,
    MessageType_MoneroLiveRefreshFinalAck = 557,
    MessageType_EosGetPublicKey = 600,
    MessageType_EosPublicKey = 601,
    MessageType_EosSignTx = 602,
    MessageType_EosTxActionRequest = 603,
    MessageType_EosTxActionAck = 604,
    MessageType_EosSignedTx = 605,
    MessageType_BinanceGetAddress = 700,
    MessageType_BinanceAddress = 701,
    MessageType_BinanceGetPublicKey = 702,
    MessageType_BinancePublicKey = 703,
    MessageType_BinanceSignTx = 704,
    MessageType_BinanceTxRequest = 705,
    MessageType_BinanceTransferMsg = 706,
    MessageType_BinanceOrderMsg = 707,
    MessageType_BinanceCancelMsg = 708,
    MessageType_BinanceSignedTx = 709,
    MessageType_WebAuthnListResidentCredentials = 800,
    MessageType_WebAuthnCredentials = 801,
    MessageType_WebAuthnAddResidentCredential = 802,
    MessageType_WebAuthnRemoveResidentCredential = 803,
}

impl ::protobuf::ProtobufEnum for MessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MessageType> {
        match value {
            0 => ::std::option::Option::Some(MessageType::MessageType_Initialize),
            1 => ::std::option::Option::Some(MessageType::MessageType_Ping),
            2 => ::std::option::Option::Some(MessageType::MessageType_Success),
            3 => ::std::option::Option::Some(MessageType::MessageType_Failure),
            4 => ::std::option::Option::Some(MessageType::MessageType_ChangePin),
            5 => ::std::option::Option::Some(MessageType::MessageType_WipeDevice),
            9 => ::std::option::Option::Some(MessageType::MessageType_GetEntropy),
            10 => ::std::option::Option::Some(MessageType::MessageType_Entropy),
            13 => ::std::option::Option::Some(MessageType::MessageType_LoadDevice),
            14 => ::std::option::Option::Some(MessageType::MessageType_ResetDevice),
            17 => ::std::option::Option::Some(MessageType::MessageType_Features),
            18 => ::std::option::Option::Some(MessageType::MessageType_PinMatrixRequest),
            19 => ::std::option::Option::Some(MessageType::MessageType_PinMatrixAck),
            20 => ::std::option::Option::Some(MessageType::MessageType_Cancel),
            24 => ::std::option::Option::Some(MessageType::MessageType_LockDevice),
            25 => ::std::option::Option::Some(MessageType::MessageType_ApplySettings),
            26 => ::std::option::Option::Some(MessageType::MessageType_ButtonRequest),
            27 => ::std::option::Option::Some(MessageType::MessageType_ButtonAck),
            28 => ::std::option::Option::Some(MessageType::MessageType_ApplyFlags),
            34 => ::std::option::Option::Some(MessageType::MessageType_BackupDevice),
            35 => ::std::option::Option::Some(MessageType::MessageType_EntropyRequest),
            36 => ::std::option::Option::Some(MessageType::MessageType_EntropyAck),
            41 => ::std::option::Option::Some(MessageType::MessageType_PassphraseRequest),
            42 => ::std::option::Option::Some(MessageType::MessageType_PassphraseAck),
            45 => ::std::option::Option::Some(MessageType::MessageType_RecoveryDevice),
            46 => ::std::option::Option::Some(MessageType::MessageType_WordRequest),
            47 => ::std::option::Option::Some(MessageType::MessageType_WordAck),
            55 => ::std::option::Option::Some(MessageType::MessageType_GetFeatures),
            79 => ::std::option::Option::Some(MessageType::MessageType_SdProtect),
            82 => ::std::option::Option::Some(MessageType::MessageType_ChangeWipeCode),
            83 => ::std::option::Option::Some(MessageType::MessageType_EndSession),
            84 => ::std::option::Option::Some(MessageType::MessageType_DoPreauthorized),
            85 => ::std::option::Option::Some(MessageType::MessageType_PreauthorizedRequest),
            86 => ::std::option::Option::Some(MessageType::MessageType_CancelAuthorization),
            87 => ::std::option::Option::Some(MessageType::MessageType_RebootToBootloader),
            63 => ::std::option::Option::Some(MessageType::MessageType_SetU2FCounter),
            80 => ::std::option::Option::Some(MessageType::MessageType_GetNextU2FCounter),
            81 => ::std::option::Option::Some(MessageType::MessageType_NextU2FCounter),
            77 => ::std::option::Option::Some(MessageType::MessageType_Deprecated_PassphraseStateRequest),
            78 => ::std::option::Option::Some(MessageType::MessageType_Deprecated_PassphraseStateAck),
            6 => ::std::option::Option::Some(MessageType::MessageType_FirmwareErase),
            7 => ::std::option::Option::Some(MessageType::MessageType_FirmwareUpload),
            8 => ::std::option::Option::Some(MessageType::MessageType_FirmwareRequest),
            32 => ::std::option::Option::Some(MessageType::MessageType_SelfTest),
            11 => ::std::option::Option::Some(MessageType::MessageType_GetPublicKey),
            12 => ::std::option::Option::Some(MessageType::MessageType_PublicKey),
            15 => ::std::option::Option::Some(MessageType::MessageType_SignTx),
            21 => ::std::option::Option::Some(MessageType::MessageType_TxRequest),
            22 => ::std::option::Option::Some(MessageType::MessageType_TxAck),
            29 => ::std::option::Option::Some(MessageType::MessageType_GetAddress),
            30 => ::std::option::Option::Some(MessageType::MessageType_Address),
            38 => ::std::option::Option::Some(MessageType::MessageType_SignMessage),
            39 => ::std::option::Option::Some(MessageType::MessageType_VerifyMessage),
            40 => ::std::option::Option::Some(MessageType::MessageType_MessageSignature),
            43 => ::std::option::Option::Some(MessageType::MessageType_GetOwnershipId),
            44 => ::std::option::Option::Some(MessageType::MessageType_OwnershipId),
            49 => ::std::option::Option::Some(MessageType::MessageType_GetOwnershipProof),
            50 => ::std::option::Option::Some(MessageType::MessageType_OwnershipProof),
            51 => ::std::option::Option::Some(MessageType::MessageType_AuthorizeCoinJoin),
            23 => ::std::option::Option::Some(MessageType::MessageType_CipherKeyValue),
            48 => ::std::option::Option::Some(MessageType::MessageType_CipheredKeyValue),
            53 => ::std::option::Option::Some(MessageType::MessageType_SignIdentity),
            54 => ::std::option::Option::Some(MessageType::MessageType_SignedIdentity),
            61 => ::std::option::Option::Some(MessageType::MessageType_GetECDHSessionKey),
            62 => ::std::option::Option::Some(MessageType::MessageType_ECDHSessionKey),
            71 => ::std::option::Option::Some(MessageType::MessageType_CosiCommit),
            72 => ::std::option::Option::Some(MessageType::MessageType_CosiCommitment),
            73 => ::std::option::Option::Some(MessageType::MessageType_CosiSign),
            74 => ::std::option::Option::Some(MessageType::MessageType_CosiSignature),
            100 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkDecision),
            101 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkGetState),
            102 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkState),
            103 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkStop),
            104 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkLog),
            110 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkMemoryRead),
            111 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkMemory),
            112 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkMemoryWrite),
            113 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkFlashErase),
            9001 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkLayout),
            9002 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkReseedRandom),
            9003 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkRecordScreen),
            9005 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkEraseSdCard),
            9006 => ::std::option::Option::Some(MessageType::MessageType_DebugLinkWatchLayout),
            450 => ::std::option::Option::Some(MessageType::MessageType_EthereumGetPublicKey),
            451 => ::std::option::Option::Some(MessageType::MessageType_EthereumPublicKey),
            56 => ::std::option::Option::Some(MessageType::MessageType_EthereumGetAddress),
            57 => ::std::option::Option::Some(MessageType::MessageType_EthereumAddress),
            58 => ::std::option::Option::Some(MessageType::MessageType_EthereumSignTx),
            452 => ::std::option::Option::Some(MessageType::MessageType_EthereumSignTxEIP1559),
            59 => ::std::option::Option::Some(MessageType::MessageType_EthereumTxRequest),
            60 => ::std::option::Option::Some(MessageType::MessageType_EthereumTxAck),
            64 => ::std::option::Option::Some(MessageType::MessageType_EthereumSignMessage),
            65 => ::std::option::Option::Some(MessageType::MessageType_EthereumVerifyMessage),
            66 => ::std::option::Option::Some(MessageType::MessageType_EthereumMessageSignature),
            67 => ::std::option::Option::Some(MessageType::MessageType_NEMGetAddress),
            68 => ::std::option::Option::Some(MessageType::MessageType_NEMAddress),
            69 => ::std::option::Option::Some(MessageType::MessageType_NEMSignTx),
            70 => ::std::option::Option::Some(MessageType::MessageType_NEMSignedTx),
            75 => ::std::option::Option::Some(MessageType::MessageType_NEMDecryptMessage),
            76 => ::std::option::Option::Some(MessageType::MessageType_NEMDecryptedMessage),
            150 => ::std::option::Option::Some(MessageType::MessageType_TezosGetAddress),
            151 => ::std::option::Option::Some(MessageType::MessageType_TezosAddress),
            152 => ::std::option::Option::Some(MessageType::MessageType_TezosSignTx),
            153 => ::std::option::Option::Some(MessageType::MessageType_TezosSignedTx),
            154 => ::std::option::Option::Some(MessageType::MessageType_TezosGetPublicKey),
            155 => ::std::option::Option::Some(MessageType::MessageType_TezosPublicKey),
            202 => ::std::option::Option::Some(MessageType::MessageType_StellarSignTx),
            203 => ::std::option::Option::Some(MessageType::MessageType_StellarTxOpRequest),
            207 => ::std::option::Option::Some(MessageType::MessageType_StellarGetAddress),
            208 => ::std::option::Option::Some(MessageType::MessageType_StellarAddress),
            210 => ::std::option::Option::Some(MessageType::MessageType_StellarCreateAccountOp),
            211 => ::std::option::Option::Some(MessageType::MessageType_StellarPaymentOp),
            212 => ::std::option::Option::Some(MessageType::MessageType_StellarPathPaymentOp),
            213 => ::std::option::Option::Some(MessageType::MessageType_StellarManageOfferOp),
            214 => ::std::option::Option::Some(MessageType::MessageType_StellarCreatePassiveOfferOp),
            215 => ::std::option::Option::Some(MessageType::MessageType_StellarSetOptionsOp),
            216 => ::std::option::Option::Some(MessageType::MessageType_StellarChangeTrustOp),
            217 => ::std::option::Option::Some(MessageType::MessageType_StellarAllowTrustOp),
            218 => ::std::option::Option::Some(MessageType::MessageType_StellarAccountMergeOp),
            220 => ::std::option::Option::Some(MessageType::MessageType_StellarManageDataOp),
            221 => ::std::option::Option::Some(MessageType::MessageType_StellarBumpSequenceOp),
            230 => ::std::option::Option::Some(MessageType::MessageType_StellarSignedTx),
            303 => ::std::option::Option::Some(MessageType::MessageType_CardanoSignTx),
            305 => ::std::option::Option::Some(MessageType::MessageType_CardanoGetPublicKey),
            306 => ::std::option::Option::Some(MessageType::MessageType_CardanoPublicKey),
            307 => ::std::option::Option::Some(MessageType::MessageType_CardanoGetAddress),
            308 => ::std::option::Option::Some(MessageType::MessageType_CardanoAddress),
            310 => ::std::option::Option::Some(MessageType::MessageType_CardanoSignedTx),
            311 => ::std::option::Option::Some(MessageType::MessageType_CardanoSignedTxChunk),
            312 => ::std::option::Option::Some(MessageType::MessageType_CardanoSignedTxChunkAck),
            313 => ::std::option::Option::Some(MessageType::MessageType_CardanoTxItemAck),
            314 => ::std::option::Option::Some(MessageType::MessageType_CardanoTxAuxiliaryDataSupplement),
            315 => ::std::option::Option::Some(MessageType::MessageType_CardanoTxWitnessRequest),
            316 => ::std::option::Option::Some(MessageType::MessageType_CardanoTxWitnessResponse),
            317 => ::std::option::Option::Some(MessageType::MessageType_CardanoTxHostAck),
            318 => ::std::option::Option::Some(MessageType::MessageType_CardanoTxBodyHash),
            319 => ::std::option::Option::Some(MessageType::MessageType_CardanoSignTxFinished),
            320 => ::std::option::Option::Some(MessageType::MessageType_CardanoSignTxInit),
            321 => ::std::option::Option::Some(MessageType::MessageType_CardanoTxInput),
            322 => ::std::option::Option::Some(MessageType::MessageType_CardanoTxOutput),
            323 => ::std::option::Option::Some(MessageType::MessageType_CardanoAssetGroup),
            324 => ::std::option::Option::Some(MessageType::MessageType_CardanoToken),
            325 => ::std::option::Option::Some(MessageType::MessageType_CardanoTxCertificate),
            326 => ::std::option::Option::Some(MessageType::MessageType_CardanoTxWithdrawal),
            327 => ::std::option::Option::Some(MessageType::MessageType_CardanoTxAuxiliaryData),
            328 => ::std::option::Option::Some(MessageType::MessageType_CardanoPoolOwner),
            329 => ::std::option::Option::Some(MessageType::MessageType_CardanoPoolRelayParameters),
            400 => ::std::option::Option::Some(MessageType::MessageType_RippleGetAddress),
            401 => ::std::option::Option::Some(MessageType::MessageType_RippleAddress),
            402 => ::std::option::Option::Some(MessageType::MessageType_RippleSignTx),
            403 => ::std::option::Option::Some(MessageType::MessageType_RippleSignedTx),
            501 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionInitRequest),
            502 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionInitAck),
            503 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionSetInputRequest),
            504 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionSetInputAck),
            505 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionInputsPermutationRequest),
            506 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionInputsPermutationAck),
            507 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionInputViniRequest),
            508 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionInputViniAck),
            509 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionAllInputsSetRequest),
            510 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionAllInputsSetAck),
            511 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionSetOutputRequest),
            512 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionSetOutputAck),
            513 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionAllOutSetRequest),
            514 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionAllOutSetAck),
            515 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionSignInputRequest),
            516 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionSignInputAck),
            517 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionFinalRequest),
            518 => ::std::option::Option::Some(MessageType::MessageType_MoneroTransactionFinalAck),
            530 => ::std::option::Option::Some(MessageType::MessageType_MoneroKeyImageExportInitRequest),
            531 => ::std::option::Option::Some(MessageType::MessageType_MoneroKeyImageExportInitAck),
            532 => ::std::option::Option::Some(MessageType::MessageType_MoneroKeyImageSyncStepRequest),
            533 => ::std::option::Option::Some(MessageType::MessageType_MoneroKeyImageSyncStepAck),
            534 => ::std::option::Option::Some(MessageType::MessageType_MoneroKeyImageSyncFinalRequest),
            535 => ::std::option::Option::Some(MessageType::MessageType_MoneroKeyImageSyncFinalAck),
            540 => ::std::option::Option::Some(MessageType::MessageType_MoneroGetAddress),
            541 => ::std::option::Option::Some(MessageType::MessageType_MoneroAddress),
            542 => ::std::option::Option::Some(MessageType::MessageType_MoneroGetWatchKey),
            543 => ::std::option::Option::Some(MessageType::MessageType_MoneroWatchKey),
            546 => ::std::option::Option::Some(MessageType::MessageType_DebugMoneroDiagRequest),
            547 => ::std::option::Option::Some(MessageType::MessageType_DebugMoneroDiagAck),
            550 => ::std::option::Option::Some(MessageType::MessageType_MoneroGetTxKeyRequest),
            551 => ::std::option::Option::Some(MessageType::MessageType_MoneroGetTxKeyAck),
            552 => ::std::option::Option::Some(MessageType::MessageType_MoneroLiveRefreshStartRequest),
            553 => ::std::option::Option::Some(MessageType::MessageType_MoneroLiveRefreshStartAck),
            554 => ::std::option::Option::Some(MessageType::MessageType_MoneroLiveRefreshStepRequest),
            555 => ::std::option::Option::Some(MessageType::MessageType_MoneroLiveRefreshStepAck),
            556 => ::std::option::Option::Some(MessageType::MessageType_MoneroLiveRefreshFinalRequest),
            557 => ::std::option::Option::Some(MessageType::MessageType_MoneroLiveRefreshFinalAck),
            600 => ::std::option::Option::Some(MessageType::MessageType_EosGetPublicKey),
            601 => ::std::option::Option::Some(MessageType::MessageType_EosPublicKey),
            602 => ::std::option::Option::Some(MessageType::MessageType_EosSignTx),
            603 => ::std::option::Option::Some(MessageType::MessageType_EosTxActionRequest),
            604 => ::std::option::Option::Some(MessageType::MessageType_EosTxActionAck),
            605 => ::std::option::Option::Some(MessageType::MessageType_EosSignedTx),
            700 => ::std::option::Option::Some(MessageType::MessageType_BinanceGetAddress),
            701 => ::std::option::Option::Some(MessageType::MessageType_BinanceAddress),
            702 => ::std::option::Option::Some(MessageType::MessageType_BinanceGetPublicKey),
            703 => ::std::option::Option::Some(MessageType::MessageType_BinancePublicKey),
            704 => ::std::option::Option::Some(MessageType::MessageType_BinanceSignTx),
            705 => ::std::option::Option::Some(MessageType::MessageType_BinanceTxRequest),
            706 => ::std::option::Option::Some(MessageType::MessageType_BinanceTransferMsg),
            707 => ::std::option::Option::Some(MessageType::MessageType_BinanceOrderMsg),
            708 => ::std::option::Option::Some(MessageType::MessageType_BinanceCancelMsg),
            709 => ::std::option::Option::Some(MessageType::MessageType_BinanceSignedTx),
            800 => ::std::option::Option::Some(MessageType::MessageType_WebAuthnListResidentCredentials),
            801 => ::std::option::Option::Some(MessageType::MessageType_WebAuthnCredentials),
            802 => ::std::option::Option::Some(MessageType::MessageType_WebAuthnAddResidentCredential),
            803 => ::std::option::Option::Some(MessageType::MessageType_WebAuthnRemoveResidentCredential),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MessageType] = &[
            MessageType::MessageType_Initialize,
            MessageType::MessageType_Ping,
            MessageType::MessageType_Success,
            MessageType::MessageType_Failure,
            MessageType::MessageType_ChangePin,
            MessageType::MessageType_WipeDevice,
            MessageType::MessageType_GetEntropy,
            MessageType::MessageType_Entropy,
            MessageType::MessageType_LoadDevice,
            MessageType::MessageType_ResetDevice,
            MessageType::MessageType_Features,
            MessageType::MessageType_PinMatrixRequest,
            MessageType::MessageType_PinMatrixAck,
            MessageType::MessageType_Cancel,
            MessageType::MessageType_LockDevice,
            MessageType::MessageType_ApplySettings,
            MessageType::MessageType_ButtonRequest,
            MessageType::MessageType_ButtonAck,
            MessageType::MessageType_ApplyFlags,
            MessageType::MessageType_BackupDevice,
            MessageType::MessageType_EntropyRequest,
            MessageType::MessageType_EntropyAck,
            MessageType::MessageType_PassphraseRequest,
            MessageType::MessageType_PassphraseAck,
            MessageType::MessageType_RecoveryDevice,
            MessageType::MessageType_WordRequest,
            MessageType::MessageType_WordAck,
            MessageType::MessageType_GetFeatures,
            MessageType::MessageType_SdProtect,
            MessageType::MessageType_ChangeWipeCode,
            MessageType::MessageType_EndSession,
            MessageType::MessageType_DoPreauthorized,
            MessageType::MessageType_PreauthorizedRequest,
            MessageType::MessageType_CancelAuthorization,
            MessageType::MessageType_RebootToBootloader,
            MessageType::MessageType_SetU2FCounter,
            MessageType::MessageType_GetNextU2FCounter,
            MessageType::MessageType_NextU2FCounter,
            MessageType::MessageType_Deprecated_PassphraseStateRequest,
            MessageType::MessageType_Deprecated_PassphraseStateAck,
            MessageType::MessageType_FirmwareErase,
            MessageType::MessageType_FirmwareUpload,
            MessageType::MessageType_FirmwareRequest,
            MessageType::MessageType_SelfTest,
            MessageType::MessageType_GetPublicKey,
            MessageType::MessageType_PublicKey,
            MessageType::MessageType_SignTx,
            MessageType::MessageType_TxRequest,
            MessageType::MessageType_TxAck,
            MessageType::MessageType_GetAddress,
            MessageType::MessageType_Address,
            MessageType::MessageType_SignMessage,
            MessageType::MessageType_VerifyMessage,
            MessageType::MessageType_MessageSignature,
            MessageType::MessageType_GetOwnershipId,
            MessageType::MessageType_OwnershipId,
            MessageType::MessageType_GetOwnershipProof,
            MessageType::MessageType_OwnershipProof,
            MessageType::MessageType_AuthorizeCoinJoin,
            MessageType::MessageType_CipherKeyValue,
            MessageType::MessageType_CipheredKeyValue,
            MessageType::MessageType_SignIdentity,
            MessageType::MessageType_SignedIdentity,
            MessageType::MessageType_GetECDHSessionKey,
            MessageType::MessageType_ECDHSessionKey,
            MessageType::MessageType_CosiCommit,
            MessageType::MessageType_CosiCommitment,
            MessageType::MessageType_CosiSign,
            MessageType::MessageType_CosiSignature,
            MessageType::MessageType_DebugLinkDecision,
            MessageType::MessageType_DebugLinkGetState,
            MessageType::MessageType_DebugLinkState,
            MessageType::MessageType_DebugLinkStop,
            MessageType::MessageType_DebugLinkLog,
            MessageType::MessageType_DebugLinkMemoryRead,
            MessageType::MessageType_DebugLinkMemory,
            MessageType::MessageType_DebugLinkMemoryWrite,
            MessageType::MessageType_DebugLinkFlashErase,
            MessageType::MessageType_DebugLinkLayout,
            MessageType::MessageType_DebugLinkReseedRandom,
            MessageType::MessageType_DebugLinkRecordScreen,
            MessageType::MessageType_DebugLinkEraseSdCard,
            MessageType::MessageType_DebugLinkWatchLayout,
            MessageType::MessageType_EthereumGetPublicKey,
            MessageType::MessageType_EthereumPublicKey,
            MessageType::MessageType_EthereumGetAddress,
            MessageType::MessageType_EthereumAddress,
            MessageType::MessageType_EthereumSignTx,
            MessageType::MessageType_EthereumSignTxEIP1559,
            MessageType::MessageType_EthereumTxRequest,
            MessageType::MessageType_EthereumTxAck,
            MessageType::MessageType_EthereumSignMessage,
            MessageType::MessageType_EthereumVerifyMessage,
            MessageType::MessageType_EthereumMessageSignature,
            MessageType::MessageType_NEMGetAddress,
            MessageType::MessageType_NEMAddress,
            MessageType::MessageType_NEMSignTx,
            MessageType::MessageType_NEMSignedTx,
            MessageType::MessageType_NEMDecryptMessage,
            MessageType::MessageType_NEMDecryptedMessage,
            MessageType::MessageType_TezosGetAddress,
            MessageType::MessageType_TezosAddress,
            MessageType::MessageType_TezosSignTx,
            MessageType::MessageType_TezosSignedTx,
            MessageType::MessageType_TezosGetPublicKey,
            MessageType::MessageType_TezosPublicKey,
            MessageType::MessageType_StellarSignTx,
            MessageType::MessageType_StellarTxOpRequest,
            MessageType::MessageType_StellarGetAddress,
            MessageType::MessageType_StellarAddress,
            MessageType::MessageType_StellarCreateAccountOp,
            MessageType::MessageType_StellarPaymentOp,
            MessageType::MessageType_StellarPathPaymentOp,
            MessageType::MessageType_StellarManageOfferOp,
            MessageType::MessageType_StellarCreatePassiveOfferOp,
            MessageType::MessageType_StellarSetOptionsOp,
            MessageType::MessageType_StellarChangeTrustOp,
            MessageType::MessageType_StellarAllowTrustOp,
            MessageType::MessageType_StellarAccountMergeOp,
            MessageType::MessageType_StellarManageDataOp,
            MessageType::MessageType_StellarBumpSequenceOp,
            MessageType::MessageType_StellarSignedTx,
            MessageType::MessageType_CardanoSignTx,
            MessageType::MessageType_CardanoGetPublicKey,
            MessageType::MessageType_CardanoPublicKey,
            MessageType::MessageType_CardanoGetAddress,
            MessageType::MessageType_CardanoAddress,
            MessageType::MessageType_CardanoSignedTx,
            MessageType::MessageType_CardanoSignedTxChunk,
            MessageType::MessageType_CardanoSignedTxChunkAck,
            MessageType::MessageType_CardanoTxItemAck,
            MessageType::MessageType_CardanoTxAuxiliaryDataSupplement,
            MessageType::MessageType_CardanoTxWitnessRequest,
            MessageType::MessageType_CardanoTxWitnessResponse,
            MessageType::MessageType_CardanoTxHostAck,
            MessageType::MessageType_CardanoTxBodyHash,
            MessageType::MessageType_CardanoSignTxFinished,
            MessageType::MessageType_CardanoSignTxInit,
            MessageType::MessageType_CardanoTxInput,
            MessageType::MessageType_CardanoTxOutput,
            MessageType::MessageType_CardanoAssetGroup,
            MessageType::MessageType_CardanoToken,
            MessageType::MessageType_CardanoTxCertificate,
            MessageType::MessageType_CardanoTxWithdrawal,
            MessageType::MessageType_CardanoTxAuxiliaryData,
            MessageType::MessageType_CardanoPoolOwner,
            MessageType::MessageType_CardanoPoolRelayParameters,
            MessageType::MessageType_RippleGetAddress,
            MessageType::MessageType_RippleAddress,
            MessageType::MessageType_RippleSignTx,
            MessageType::MessageType_RippleSignedTx,
            MessageType::MessageType_MoneroTransactionInitRequest,
            MessageType::MessageType_MoneroTransactionInitAck,
            MessageType::MessageType_MoneroTransactionSetInputRequest,
            MessageType::MessageType_MoneroTransactionSetInputAck,
            MessageType::MessageType_MoneroTransactionInputsPermutationRequest,
            MessageType::MessageType_MoneroTransactionInputsPermutationAck,
            MessageType::MessageType_MoneroTransactionInputViniRequest,
            MessageType::MessageType_MoneroTransactionInputViniAck,
            MessageType::MessageType_MoneroTransactionAllInputsSetRequest,
            MessageType::MessageType_MoneroTransactionAllInputsSetAck,
            MessageType::MessageType_MoneroTransactionSetOutputRequest,
            MessageType::MessageType_MoneroTransactionSetOutputAck,
            MessageType::MessageType_MoneroTransactionAllOutSetRequest,
            MessageType::MessageType_MoneroTransactionAllOutSetAck,
            MessageType::MessageType_MoneroTransactionSignInputRequest,
            MessageType::MessageType_MoneroTransactionSignInputAck,
            MessageType::MessageType_MoneroTransactionFinalRequest,
            MessageType::MessageType_MoneroTransactionFinalAck,
            MessageType::MessageType_MoneroKeyImageExportInitRequest,
            MessageType::MessageType_MoneroKeyImageExportInitAck,
            MessageType::MessageType_MoneroKeyImageSyncStepRequest,
            MessageType::MessageType_MoneroKeyImageSyncStepAck,
            MessageType::MessageType_MoneroKeyImageSyncFinalRequest,
            MessageType::MessageType_MoneroKeyImageSyncFinalAck,
            MessageType::MessageType_MoneroGetAddress,
            MessageType::MessageType_MoneroAddress,
            MessageType::MessageType_MoneroGetWatchKey,
            MessageType::MessageType_MoneroWatchKey,
            MessageType::MessageType_DebugMoneroDiagRequest,
            MessageType::MessageType_DebugMoneroDiagAck,
            MessageType::MessageType_MoneroGetTxKeyRequest,
            MessageType::MessageType_MoneroGetTxKeyAck,
            MessageType::MessageType_MoneroLiveRefreshStartRequest,
            MessageType::MessageType_MoneroLiveRefreshStartAck,
            MessageType::MessageType_MoneroLiveRefreshStepRequest,
            MessageType::MessageType_MoneroLiveRefreshStepAck,
            MessageType::MessageType_MoneroLiveRefreshFinalRequest,
            MessageType::MessageType_MoneroLiveRefreshFinalAck,
            MessageType::MessageType_EosGetPublicKey,
            MessageType::MessageType_EosPublicKey,
            MessageType::MessageType_EosSignTx,
            MessageType::MessageType_EosTxActionRequest,
            MessageType::MessageType_EosTxActionAck,
            MessageType::MessageType_EosSignedTx,
            MessageType::MessageType_BinanceGetAddress,
            MessageType::MessageType_BinanceAddress,
            MessageType::MessageType_BinanceGetPublicKey,
            MessageType::MessageType_BinancePublicKey,
            MessageType::MessageType_BinanceSignTx,
            MessageType::MessageType_BinanceTxRequest,
            MessageType::MessageType_BinanceTransferMsg,
            MessageType::MessageType_BinanceOrderMsg,
            MessageType::MessageType_BinanceCancelMsg,
            MessageType::MessageType_BinanceSignedTx,
            MessageType::MessageType_WebAuthnListResidentCredentials,
            MessageType::MessageType_WebAuthnCredentials,
            MessageType::MessageType_WebAuthnAddResidentCredential,
            MessageType::MessageType_WebAuthnRemoveResidentCredential,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MessageType>("MessageType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MessageType {
}

impl ::std::default::Default for MessageType {
    fn default() -> Self {
        MessageType::MessageType_Initialize
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

/// Extension fields
pub mod exts {

    pub const wire_in: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50002, phantom: ::std::marker::PhantomData };

    pub const wire_out: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50003, phantom: ::std::marker::PhantomData };

    pub const wire_debug_in: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50004, phantom: ::std::marker::PhantomData };

    pub const wire_debug_out: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50005, phantom: ::std::marker::PhantomData };

    pub const wire_tiny: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50006, phantom: ::std::marker::PhantomData };

    pub const wire_bootloader: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50007, phantom: ::std::marker::PhantomData };

    pub const wire_no_fsm: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 50008, phantom: ::std::marker::PhantomData };

    pub const bitcoin_only: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 60000, phantom: ::std::marker::PhantomData };

    pub const has_bitcoin_only_values: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 51001, phantom: ::std::marker::PhantomData };

    pub const unstable: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 52001, phantom: ::std::marker::PhantomData };

    pub const wire_type: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, ::protobuf::types::ProtobufTypeUint32> = ::protobuf::ext::ExtFieldOptional { field_number: 52002, phantom: ::std::marker::PhantomData };

    pub const include_in_bitcoin_only: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 60000, phantom: ::std::marker::PhantomData };

    pub const experimental: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 53001, phantom: ::std::marker::PhantomData };
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0emessages.proto\x12\x12hw.trezor.messages\x1a\x20google/protobuf/de\
    scriptor.proto*\xdbG\n\x0bMessageType\x12(\n\x16MessageType_Initialize\
    \x10\0\x1a\x0c\x80\xa6\x1d\x01\xb0\xb5\x18\x01\x90\xb5\x18\x01\x12\x1e\n\
    \x10MessageType_Ping\x10\x01\x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12\
    !\n\x13MessageType_Success\x10\x02\x1a\x08\x80\xa6\x1d\x01\x98\xb5\x18\
    \x01\x12!\n\x13MessageType_Failure\x10\x03\x1a\x08\x80\xa6\x1d\x01\x98\
    \xb5\x18\x01\x12#\n\x15MessageType_ChangePin\x10\x04\x1a\x08\x80\xa6\x1d\
    \x01\x90\xb5\x18\x01\x12$\n\x16MessageType_WipeDevice\x10\x05\x1a\x08\
    \x80\xa6\x1d\x01\x90\xb5\x18\x01\x12$\n\x16MessageType_GetEntropy\x10\t\
    \x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12!\n\x13MessageType_Entropy\
    \x10\n\x1a\x08\x80\xa6\x1d\x01\x98\xb5\x18\x01\x12$\n\x16MessageType_Loa\
    dDevice\x10\r\x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12%\n\x17MessageT\
    ype_ResetDevice\x10\x0e\x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12\"\n\
    \x14MessageType_Features\x10\x11\x1a\x08\x80\xa6\x1d\x01\x98\xb5\x18\x01\
    \x12*\n\x1cMessageType_PinMatrixRequest\x10\x12\x1a\x08\x80\xa6\x1d\x01\
    \x98\xb5\x18\x01\x12.\n\x18MessageType_PinMatrixAck\x10\x13\x1a\x10\xc0\
    \xb5\x18\x01\xb0\xb5\x18\x01\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12$\n\x12M\
    essageType_Cancel\x10\x14\x1a\x0c\x80\xa6\x1d\x01\xb0\xb5\x18\x01\x90\
    \xb5\x18\x01\x12$\n\x16MessageType_LockDevice\x10\x18\x1a\x08\x80\xa6\
    \x1d\x01\x90\xb5\x18\x01\x12'\n\x19MessageType_ApplySettings\x10\x19\x1a\
    \x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12'\n\x19MessageType_ButtonRequest\
    \x10\x1a\x1a\x08\x80\xa6\x1d\x01\x98\xb5\x18\x01\x12+\n\x15MessageType_B\
    uttonAck\x10\x1b\x1a\x10\xc0\xb5\x18\x01\xb0\xb5\x18\x01\x80\xa6\x1d\x01\
    \x90\xb5\x18\x01\x12$\n\x16MessageType_ApplyFlags\x10\x1c\x1a\x08\x80\
    \xa6\x1d\x01\x90\xb5\x18\x01\x12&\n\x18MessageType_BackupDevice\x10\"\
    \x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12(\n\x1aMessageType_EntropyRe\
    quest\x10#\x1a\x08\x80\xa6\x1d\x01\x98\xb5\x18\x01\x12$\n\x16MessageType\
    _EntropyAck\x10$\x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12+\n\x1dMessa\
    geType_PassphraseRequest\x10)\x1a\x08\x80\xa6\x1d\x01\x98\xb5\x18\x01\
    \x12/\n\x19MessageType_PassphraseAck\x10*\x1a\x10\xc0\xb5\x18\x01\xb0\
    \xb5\x18\x01\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12(\n\x1aMessageType_Recov\
    eryDevice\x10-\x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12%\n\x17Message\
    Type_WordRequest\x10.\x1a\x08\x80\xa6\x1d\x01\x98\xb5\x18\x01\x12!\n\x13\
    MessageType_WordAck\x10/\x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12%\n\
    \x17MessageType_GetFeatures\x107\x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\
    \x12#\n\x15MessageType_SdProtect\x10O\x1a\x08\x80\xa6\x1d\x01\x90\xb5\
    \x18\x01\x12(\n\x1aMessageType_ChangeWipeCode\x10R\x1a\x08\x80\xa6\x1d\
    \x01\x90\xb5\x18\x01\x12$\n\x16MessageType_EndSession\x10S\x1a\x08\x80\
    \xa6\x1d\x01\x90\xb5\x18\x01\x12)\n\x1bMessageType_DoPreauthorized\x10T\
    \x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12.\n\x20MessageType_Preauthor\
    izedRequest\x10U\x1a\x08\x80\xa6\x1d\x01\x98\xb5\x18\x01\x12-\n\x1fMessa\
    geType_CancelAuthorization\x10V\x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\
    \x12,\n\x1eMessageType_RebootToBootloader\x10W\x1a\x08\x80\xa6\x1d\x01\
    \x90\xb5\x18\x01\x12#\n\x19MessageType_SetU2FCounter\x10?\x1a\x04\x90\
    \xb5\x18\x01\x12'\n\x1dMessageType_GetNextU2FCounter\x10P\x1a\x04\x90\
    \xb5\x18\x01\x12$\n\x1aMessageType_NextU2FCounter\x10Q\x1a\x04\x98\xb5\
    \x18\x01\x125\n-MessageType_Deprecated_PassphraseStateRequest\x10M\x1a\
    \x02\x08\x01\x121\n)MessageType_Deprecated_PassphraseStateAck\x10N\x1a\
    \x02\x08\x01\x12+\n\x19MessageType_FirmwareErase\x10\x06\x1a\x0c\xb8\xb5\
    \x18\x01\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12,\n\x1aMessageType_FirmwareU\
    pload\x10\x07\x1a\x0c\xb8\xb5\x18\x01\x80\xa6\x1d\x01\x90\xb5\x18\x01\
    \x12-\n\x1bMessageType_FirmwareRequest\x10\x08\x1a\x0c\xb8\xb5\x18\x01\
    \x80\xa6\x1d\x01\x98\xb5\x18\x01\x12&\n\x14MessageType_SelfTest\x10\x20\
    \x1a\x0c\xb8\xb5\x18\x01\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12&\n\x18Messa\
    geType_GetPublicKey\x10\x0b\x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12#\
    \n\x15MessageType_PublicKey\x10\x0c\x1a\x08\x80\xa6\x1d\x01\x98\xb5\x18\
    \x01\x12\x20\n\x12MessageType_SignTx\x10\x0f\x1a\x08\x80\xa6\x1d\x01\x90\
    \xb5\x18\x01\x12#\n\x15MessageType_TxRequest\x10\x15\x1a\x08\x80\xa6\x1d\
    \x01\x98\xb5\x18\x01\x12\x1f\n\x11MessageType_TxAck\x10\x16\x1a\x08\x80\
    \xa6\x1d\x01\x90\xb5\x18\x01\x12$\n\x16MessageType_GetAddress\x10\x1d\
    \x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12!\n\x13MessageType_Address\
    \x10\x1e\x1a\x08\x80\xa6\x1d\x01\x98\xb5\x18\x01\x12%\n\x17MessageType_S\
    ignMessage\x10&\x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12'\n\x19Messag\
    eType_VerifyMessage\x10'\x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12*\n\
    \x1cMessageType_MessageSignature\x10(\x1a\x08\x80\xa6\x1d\x01\x98\xb5\
    \x18\x01\x12(\n\x1aMessageType_GetOwnershipId\x10+\x1a\x08\x80\xa6\x1d\
    \x01\x90\xb5\x18\x01\x12%\n\x17MessageType_OwnershipId\x10,\x1a\x08\x80\
    \xa6\x1d\x01\x98\xb5\x18\x01\x12+\n\x1dMessageType_GetOwnershipProof\x10\
    1\x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12(\n\x1aMessageType_Ownershi\
    pProof\x102\x1a\x08\x80\xa6\x1d\x01\x98\xb5\x18\x01\x12+\n\x1dMessageTyp\
    e_AuthorizeCoinJoin\x103\x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12(\n\
    \x1aMessageType_CipherKeyValue\x10\x17\x1a\x08\x80\xa6\x1d\x01\x90\xb5\
    \x18\x01\x12*\n\x1cMessageType_CipheredKeyValue\x100\x1a\x08\x80\xa6\x1d\
    \x01\x98\xb5\x18\x01\x12&\n\x18MessageType_SignIdentity\x105\x1a\x08\x80\
    \xa6\x1d\x01\x90\xb5\x18\x01\x12(\n\x1aMessageType_SignedIdentity\x106\
    \x1a\x08\x80\xa6\x1d\x01\x98\xb5\x18\x01\x12+\n\x1dMessageType_GetECDHSe\
    ssionKey\x10=\x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\x12(\n\x1aMessageT\
    ype_ECDHSessionKey\x10>\x1a\x08\x80\xa6\x1d\x01\x98\xb5\x18\x01\x12$\n\
    \x16MessageType_CosiCommit\x10G\x1a\x08\x80\xa6\x1d\x01\x90\xb5\x18\x01\
    \x12(\n\x1aMessageType_CosiCommitment\x10H\x1a\x08\x80\xa6\x1d\x01\x98\
    \xb5\x18\x01\x12\"\n\x14MessageType_CosiSign\x10I\x1a\x08\x80\xa6\x1d\
    \x01\x90\xb5\x18\x01\x12'\n\x19MessageType_CosiSignature\x10J\x1a\x08\
    \x80\xa6\x1d\x01\x98\xb5\x18\x01\x123\n\x1dMessageType_DebugLinkDecision\
    \x10d\x1a\x10\xc0\xb5\x18\x01\xb0\xb5\x18\x01\x80\xa6\x1d\x01\xa0\xb5\
    \x18\x01\x12/\n\x1dMessageType_DebugLinkGetState\x10e\x1a\x0c\x80\xa6\
    \x1d\x01\xb0\xb5\x18\x01\xa0\xb5\x18\x01\x12(\n\x1aMessageType_DebugLink\
    State\x10f\x1a\x08\x80\xa6\x1d\x01\xa8\xb5\x18\x01\x12'\n\x19MessageType\
    _DebugLinkStop\x10g\x1a\x08\x80\xa6\x1d\x01\xa0\xb5\x18\x01\x12&\n\x18Me\
    ssageType_DebugLinkLog\x10h\x1a\x08\x80\xa6\x1d\x01\xa8\xb5\x18\x01\x12-\
    \n\x1fMessageType_DebugLinkMemoryRead\x10n\x1a\x08\x80\xa6\x1d\x01\xa0\
    \xb5\x18\x01\x12)\n\x1bMessageType_DebugLinkMemory\x10o\x1a\x08\x80\xa6\
    \x1d\x01\xa8\xb5\x18\x01\x12.\n\x20MessageType_DebugLinkMemoryWrite\x10p\
    \x1a\x08\x80\xa6\x1d\x01\xa0\xb5\x18\x01\x12-\n\x1fMessageType_DebugLink\
    FlashErase\x10q\x1a\x08\x80\xa6\x1d\x01\xa0\xb5\x18\x01\x12*\n\x1bMessag\
    eType_DebugLinkLayout\x10\xa9F\x1a\x08\x80\xa6\x1d\x01\xa8\xb5\x18\x01\
    \x120\n!MessageType_DebugLinkReseedRandom\x10\xaaF\x1a\x08\x80\xa6\x1d\
    \x01\xa0\xb5\x18\x01\x120\n!MessageType_DebugLinkRecordScreen\x10\xabF\
    \x1a\x08\x80\xa6\x1d\x01\xa0\xb5\x18\x01\x12/\n\x20MessageType_DebugLink\
    EraseSdCard\x10\xadF\x1a\x08\x80\xa6\x1d\x01\xa0\xb5\x18\x01\x12/\n\x20M\
    essageType_DebugLinkWatchLayout\x10\xaeF\x1a\x08\x80\xa6\x1d\x01\xa0\xb5\
    \x18\x01\x12+\n\x20MessageType_EthereumGetPublicKey\x10\xc2\x03\x1a\x04\
    \x90\xb5\x18\x01\x12(\n\x1dMessageType_EthereumPublicKey\x10\xc3\x03\x1a\
    \x04\x98\xb5\x18\x01\x12(\n\x1eMessageType_EthereumGetAddress\x108\x1a\
    \x04\x90\xb5\x18\x01\x12%\n\x1bMessageType_EthereumAddress\x109\x1a\x04\
    \x98\xb5\x18\x01\x12$\n\x1aMessageType_EthereumSignTx\x10:\x1a\x04\x90\
    \xb5\x18\x01\x12,\n!MessageType_EthereumSignTxEIP1559\x10\xc4\x03\x1a\
    \x04\x90\xb5\x18\x01\x12'\n\x1dMessageType_EthereumTxRequest\x10;\x1a\
    \x04\x98\xb5\x18\x01\x12#\n\x19MessageType_EthereumTxAck\x10<\x1a\x04\
    \x90\xb5\x18\x01\x12)\n\x1fMessageType_EthereumSignMessage\x10@\x1a\x04\
    \x90\xb5\x18\x01\x12+\n!MessageType_EthereumVerifyMessage\x10A\x1a\x04\
    \x90\xb5\x18\x01\x12.\n$MessageType_EthereumMessageSignature\x10B\x1a\
    \x04\x98\xb5\x18\x01\x12#\n\x19MessageType_NEMGetAddress\x10C\x1a\x04\
    \x90\xb5\x18\x01\x12\x20\n\x16MessageType_NEMAddress\x10D\x1a\x04\x98\
    \xb5\x18\x01\x12\x1f\n\x15MessageType_NEMSignTx\x10E\x1a\x04\x90\xb5\x18\
    \x01\x12!\n\x17MessageType_NEMSignedTx\x10F\x1a\x04\x98\xb5\x18\x01\x12'\
    \n\x1dMessageType_NEMDecryptMessage\x10K\x1a\x04\x90\xb5\x18\x01\x12)\n\
    \x1fMessageType_NEMDecryptedMessage\x10L\x1a\x04\x98\xb5\x18\x01\x12&\n\
    \x1bMessageType_TezosGetAddress\x10\x96\x01\x1a\x04\x90\xb5\x18\x01\x12#\
    \n\x18MessageType_TezosAddress\x10\x97\x01\x1a\x04\x98\xb5\x18\x01\x12\"\
    \n\x17MessageType_TezosSignTx\x10\x98\x01\x1a\x04\x90\xb5\x18\x01\x12$\n\
    \x19MessageType_TezosSignedTx\x10\x99\x01\x1a\x04\x98\xb5\x18\x01\x12(\n\
    \x1dMessageType_TezosGetPublicKey\x10\x9a\x01\x1a\x04\x90\xb5\x18\x01\
    \x12%\n\x1aMessageType_TezosPublicKey\x10\x9b\x01\x1a\x04\x98\xb5\x18\
    \x01\x12$\n\x19MessageType_StellarSignTx\x10\xca\x01\x1a\x04\x90\xb5\x18\
    \x01\x12)\n\x1eMessageType_StellarTxOpRequest\x10\xcb\x01\x1a\x04\x98\
    \xb5\x18\x01\x12(\n\x1dMessageType_StellarGetAddress\x10\xcf\x01\x1a\x04\
    \x90\xb5\x18\x01\x12%\n\x1aMessageType_StellarAddress\x10\xd0\x01\x1a\
    \x04\x98\xb5\x18\x01\x12-\n\"MessageType_StellarCreateAccountOp\x10\xd2\
    \x01\x1a\x04\x90\xb5\x18\x01\x12'\n\x1cMessageType_StellarPaymentOp\x10\
    \xd3\x01\x1a\x04\x90\xb5\x18\x01\x12+\n\x20MessageType_StellarPathPaymen\
    tOp\x10\xd4\x01\x1a\x04\x90\xb5\x18\x01\x12+\n\x20MessageType_StellarMan\
    ageOfferOp\x10\xd5\x01\x1a\x04\x90\xb5\x18\x01\x122\n'MessageType_Stella\
    rCreatePassiveOfferOp\x10\xd6\x01\x1a\x04\x90\xb5\x18\x01\x12*\n\x1fMess\
    ageType_StellarSetOptionsOp\x10\xd7\x01\x1a\x04\x90\xb5\x18\x01\x12+\n\
    \x20MessageType_StellarChangeTrustOp\x10\xd8\x01\x1a\x04\x90\xb5\x18\x01\
    \x12*\n\x1fMessageType_StellarAllowTrustOp\x10\xd9\x01\x1a\x04\x90\xb5\
    \x18\x01\x12,\n!MessageType_StellarAccountMergeOp\x10\xda\x01\x1a\x04\
    \x90\xb5\x18\x01\x12*\n\x1fMessageType_StellarManageDataOp\x10\xdc\x01\
    \x1a\x04\x90\xb5\x18\x01\x12,\n!MessageType_StellarBumpSequenceOp\x10\
    \xdd\x01\x1a\x04\x90\xb5\x18\x01\x12&\n\x1bMessageType_StellarSignedTx\
    \x10\xe6\x01\x1a\x04\x98\xb5\x18\x01\x12$\n\x19MessageType_CardanoSignTx\
    \x10\xaf\x02\x1a\x04\x90\xb5\x18\x01\x12*\n\x1fMessageType_CardanoGetPub\
    licKey\x10\xb1\x02\x1a\x04\x90\xb5\x18\x01\x12'\n\x1cMessageType_Cardano\
    PublicKey\x10\xb2\x02\x1a\x04\x98\xb5\x18\x01\x12(\n\x1dMessageType_Card\
    anoGetAddress\x10\xb3\x02\x1a\x04\x90\xb5\x18\x01\x12%\n\x1aMessageType_\
    CardanoAddress\x10\xb4\x02\x1a\x04\x98\xb5\x18\x01\x12&\n\x1bMessageType\
    _CardanoSignedTx\x10\xb6\x02\x1a\x04\x98\xb5\x18\x01\x12+\n\x20MessageTy\
    pe_CardanoSignedTxChunk\x10\xb7\x02\x1a\x04\x98\xb5\x18\x01\x12.\n#Messa\
    geType_CardanoSignedTxChunkAck\x10\xb8\x02\x1a\x04\x90\xb5\x18\x01\x12'\
    \n\x1cMessageType_CardanoTxItemAck\x10\xb9\x02\x1a\x04\x98\xb5\x18\x01\
    \x127\n,MessageType_CardanoTxAuxiliaryDataSupplement\x10\xba\x02\x1a\x04\
    \x98\xb5\x18\x01\x12.\n#MessageType_CardanoTxWitnessRequest\x10\xbb\x02\
    \x1a\x04\x90\xb5\x18\x01\x12/\n$MessageType_CardanoTxWitnessResponse\x10\
    \xbc\x02\x1a\x04\x98\xb5\x18\x01\x12'\n\x1cMessageType_CardanoTxHostAck\
    \x10\xbd\x02\x1a\x04\x90\xb5\x18\x01\x12(\n\x1dMessageType_CardanoTxBody\
    Hash\x10\xbe\x02\x1a\x04\x98\xb5\x18\x01\x12,\n!MessageType_CardanoSignT\
    xFinished\x10\xbf\x02\x1a\x04\x98\xb5\x18\x01\x12(\n\x1dMessageType_Card\
    anoSignTxInit\x10\xc0\x02\x1a\x04\x90\xb5\x18\x01\x12%\n\x1aMessageType_\
    CardanoTxInput\x10\xc1\x02\x1a\x04\x90\xb5\x18\x01\x12&\n\x1bMessageType\
    _CardanoTxOutput\x10\xc2\x02\x1a\x04\x90\xb5\x18\x01\x12(\n\x1dMessageTy\
    pe_CardanoAssetGroup\x10\xc3\x02\x1a\x04\x90\xb5\x18\x01\x12#\n\x18Messa\
    geType_CardanoToken\x10\xc4\x02\x1a\x04\x90\xb5\x18\x01\x12+\n\x20Messag\
    eType_CardanoTxCertificate\x10\xc5\x02\x1a\x04\x90\xb5\x18\x01\x12*\n\
    \x1fMessageType_CardanoTxWithdrawal\x10\xc6\x02\x1a\x04\x90\xb5\x18\x01\
    \x12-\n\"MessageType_CardanoTxAuxiliaryData\x10\xc7\x02\x1a\x04\x90\xb5\
    \x18\x01\x12'\n\x1cMessageType_CardanoPoolOwner\x10\xc8\x02\x1a\x04\x90\
    \xb5\x18\x01\x121\n&MessageType_CardanoPoolRelayParameters\x10\xc9\x02\
    \x1a\x04\x90\xb5\x18\x01\x12'\n\x1cMessageType_RippleGetAddress\x10\x90\
    \x03\x1a\x04\x90\xb5\x18\x01\x12$\n\x19MessageType_RippleAddress\x10\x91\
    \x03\x1a\x04\x98\xb5\x18\x01\x12#\n\x18MessageType_RippleSignTx\x10\x92\
    \x03\x1a\x04\x90\xb5\x18\x01\x12%\n\x1aMessageType_RippleSignedTx\x10\
    \x93\x03\x1a\x04\x90\xb5\x18\x01\x123\n(MessageType_MoneroTransactionIni\
    tRequest\x10\xf5\x03\x1a\x04\x98\xb5\x18\x01\x12/\n$MessageType_MoneroTr\
    ansactionInitAck\x10\xf6\x03\x1a\x04\x98\xb5\x18\x01\x127\n,MessageType_\
    MoneroTransactionSetInputRequest\x10\xf7\x03\x1a\x04\x98\xb5\x18\x01\x12\
    3\n(MessageType_MoneroTransactionSetInputAck\x10\xf8\x03\x1a\x04\x98\xb5\
    \x18\x01\x12@\n5MessageType_MoneroTransactionInputsPermutationRequest\
    \x10\xf9\x03\x1a\x04\x98\xb5\x18\x01\x12<\n1MessageType_MoneroTransactio\
    nInputsPermutationAck\x10\xfa\x03\x1a\x04\x98\xb5\x18\x01\x128\n-Message\
    Type_MoneroTransactionInputViniRequest\x10\xfb\x03\x1a\x04\x98\xb5\x18\
    \x01\x124\n)MessageType_MoneroTransactionInputViniAck\x10\xfc\x03\x1a\
    \x04\x98\xb5\x18\x01\x12;\n0MessageType_MoneroTransactionAllInputsSetReq\
    uest\x10\xfd\x03\x1a\x04\x98\xb5\x18\x01\x127\n,MessageType_MoneroTransa\
    ctionAllInputsSetAck\x10\xfe\x03\x1a\x04\x98\xb5\x18\x01\x128\n-MessageT\
    ype_MoneroTransactionSetOutputRequest\x10\xff\x03\x1a\x04\x98\xb5\x18\
    \x01\x124\n)MessageType_MoneroTransactionSetOutputAck\x10\x80\x04\x1a\
    \x04\x98\xb5\x18\x01\x128\n-MessageType_MoneroTransactionAllOutSetReques\
    t\x10\x81\x04\x1a\x04\x98\xb5\x18\x01\x124\n)MessageType_MoneroTransacti\
    onAllOutSetAck\x10\x82\x04\x1a\x04\x98\xb5\x18\x01\x128\n-MessageType_Mo\
    neroTransactionSignInputRequest\x10\x83\x04\x1a\x04\x98\xb5\x18\x01\x124\
    \n)MessageType_MoneroTransactionSignInputAck\x10\x84\x04\x1a\x04\x98\xb5\
    \x18\x01\x124\n)MessageType_MoneroTransactionFinalRequest\x10\x85\x04\
    \x1a\x04\x98\xb5\x18\x01\x120\n%MessageType_MoneroTransactionFinalAck\
    \x10\x86\x04\x1a\x04\x98\xb5\x18\x01\x126\n+MessageType_MoneroKeyImageEx\
    portInitRequest\x10\x92\x04\x1a\x04\x98\xb5\x18\x01\x122\n'MessageType_M\
    oneroKeyImageExportInitAck\x10\x93\x04\x1a\x04\x98\xb5\x18\x01\x124\n)Me\
    ssageType_MoneroKeyImageSyncStepRequest\x10\x94\x04\x1a\x04\x98\xb5\x18\
    \x01\x120\n%MessageType_MoneroKeyImageSyncStepAck\x10\x95\x04\x1a\x04\
    \x98\xb5\x18\x01\x125\n*MessageType_MoneroKeyImageSyncFinalRequest\x10\
    \x96\x04\x1a\x04\x98\xb5\x18\x01\x121\n&MessageType_MoneroKeyImageSyncFi\
    nalAck\x10\x97\x04\x1a\x04\x98\xb5\x18\x01\x12'\n\x1cMessageType_MoneroG\
    etAddress\x10\x9c\x04\x1a\x04\x90\xb5\x18\x01\x12$\n\x19MessageType_Mone\
    roAddress\x10\x9d\x04\x1a\x04\x98\xb5\x18\x01\x12(\n\x1dMessageType_Mone\
    roGetWatchKey\x10\x9e\x04\x1a\x04\x90\xb5\x18\x01\x12%\n\x1aMessageType_\
    MoneroWatchKey\x10\x9f\x04\x1a\x04\x98\xb5\x18\x01\x12-\n\"MessageType_D\
    ebugMoneroDiagRequest\x10\xa2\x04\x1a\x04\x90\xb5\x18\x01\x12)\n\x1eMess\
    ageType_DebugMoneroDiagAck\x10\xa3\x04\x1a\x04\x98\xb5\x18\x01\x12,\n!Me\
    ssageType_MoneroGetTxKeyRequest\x10\xa6\x04\x1a\x04\x90\xb5\x18\x01\x12(\
    \n\x1dMessageType_MoneroGetTxKeyAck\x10\xa7\x04\x1a\x04\x98\xb5\x18\x01\
    \x124\n)MessageType_MoneroLiveRefreshStartRequest\x10\xa8\x04\x1a\x04\
    \x90\xb5\x18\x01\x120\n%MessageType_MoneroLiveRefreshStartAck\x10\xa9\
    \x04\x1a\x04\x98\xb5\x18\x01\x123\n(MessageType_MoneroLiveRefreshStepReq\
    uest\x10\xaa\x04\x1a\x04\x90\xb5\x18\x01\x12/\n$MessageType_MoneroLiveRe\
    freshStepAck\x10\xab\x04\x1a\x04\x98\xb5\x18\x01\x124\n)MessageType_Mone\
    roLiveRefreshFinalRequest\x10\xac\x04\x1a\x04\x90\xb5\x18\x01\x120\n%Mes\
    sageType_MoneroLiveRefreshFinalAck\x10\xad\x04\x1a\x04\x98\xb5\x18\x01\
    \x12&\n\x1bMessageType_EosGetPublicKey\x10\xd8\x04\x1a\x04\x90\xb5\x18\
    \x01\x12#\n\x18MessageType_EosPublicKey\x10\xd9\x04\x1a\x04\x98\xb5\x18\
    \x01\x12\x20\n\x15MessageType_EosSignTx\x10\xda\x04\x1a\x04\x90\xb5\x18\
    \x01\x12)\n\x1eMessageType_EosTxActionRequest\x10\xdb\x04\x1a\x04\x98\
    \xb5\x18\x01\x12%\n\x1aMessageType_EosTxActionAck\x10\xdc\x04\x1a\x04\
    \x90\xb5\x18\x01\x12\"\n\x17MessageType_EosSignedTx\x10\xdd\x04\x1a\x04\
    \x98\xb5\x18\x01\x12(\n\x1dMessageType_BinanceGetAddress\x10\xbc\x05\x1a\
    \x04\x90\xb5\x18\x01\x12%\n\x1aMessageType_BinanceAddress\x10\xbd\x05\
    \x1a\x04\x98\xb5\x18\x01\x12*\n\x1fMessageType_BinanceGetPublicKey\x10\
    \xbe\x05\x1a\x04\x90\xb5\x18\x01\x12'\n\x1cMessageType_BinancePublicKey\
    \x10\xbf\x05\x1a\x04\x98\xb5\x18\x01\x12$\n\x19MessageType_BinanceSignTx\
    \x10\xc0\x05\x1a\x04\x90\xb5\x18\x01\x12'\n\x1cMessageType_BinanceTxRequ\
    est\x10\xc1\x05\x1a\x04\x98\xb5\x18\x01\x12)\n\x1eMessageType_BinanceTra\
    nsferMsg\x10\xc2\x05\x1a\x04\x90\xb5\x18\x01\x12&\n\x1bMessageType_Binan\
    ceOrderMsg\x10\xc3\x05\x1a\x04\x90\xb5\x18\x01\x12'\n\x1cMessageType_Bin\
    anceCancelMsg\x10\xc4\x05\x1a\x04\x90\xb5\x18\x01\x12&\n\x1bMessageType_\
    BinanceSignedTx\x10\xc5\x05\x1a\x04\x98\xb5\x18\x01\x126\n+MessageType_W\
    ebAuthnListResidentCredentials\x10\xa0\x06\x1a\x04\x90\xb5\x18\x01\x12*\
    \n\x1fMessageType_WebAuthnCredentials\x10\xa1\x06\x1a\x04\x98\xb5\x18\
    \x01\x124\n)MessageType_WebAuthnAddResidentCredential\x10\xa2\x06\x1a\
    \x04\x90\xb5\x18\x01\x127\n,MessageType_WebAuthnRemoveResidentCredential\
    \x10\xa3\x06\x1a\x04\x90\xb5\x18\x01\x1a\x04\xc8\xf3\x18\x01\"\x04\x08r\
    \x10z:<\n\x07wire_in\x18\xd2\x86\x03\x20\x01(\x08\x12!.google.protobuf.E\
    numValueOptionsR\x06wireIn:>\n\x08wire_out\x18\xd3\x86\x03\x20\x01(\x08\
    \x12!.google.protobuf.EnumValueOptionsR\x07wireOut:G\n\rwire_debug_in\
    \x18\xd4\x86\x03\x20\x01(\x08\x12!.google.protobuf.EnumValueOptionsR\x0b\
    wireDebugIn:I\n\x0ewire_debug_out\x18\xd5\x86\x03\x20\x01(\x08\x12!.goog\
    le.protobuf.EnumValueOptionsR\x0cwireDebugOut:@\n\twire_tiny\x18\xd6\x86\
    \x03\x20\x01(\x08\x12!.google.protobuf.EnumValueOptionsR\x08wireTiny:L\n\
    \x0fwire_bootloader\x18\xd7\x86\x03\x20\x01(\x08\x12!.google.protobuf.En\
    umValueOptionsR\x0ewireBootloader:C\n\x0bwire_no_fsm\x18\xd8\x86\x03\x20\
    \x01(\x08\x12!.google.protobuf.EnumValueOptionsR\twireNoFsm:F\n\x0cbitco\
    in_only\x18\xe0\xd4\x03\x20\x01(\x08\x12!.google.protobuf.EnumValueOptio\
    nsR\x0bbitcoinOnly:U\n\x17has_bitcoin_only_values\x18\xb9\x8e\x03\x20\
    \x01(\x08\x12\x1c.google.protobuf.EnumOptionsR\x14hasBitcoinOnlyValues:=\
    \n\x08unstable\x18\xa1\x96\x03\x20\x01(\x08\x12\x1f.google.protobuf.Mess\
    ageOptionsR\x08unstable:>\n\twire_type\x18\xa2\x96\x03\x20\x01(\r\x12\
    \x1f.google.protobuf.MessageOptionsR\x08wireType:X\n\x17include_in_bitco\
    in_only\x18\xe0\xd4\x03\x20\x01(\x08\x12\x1f.google.protobuf.MessageOpti\
    onsR\x14includeInBitcoinOnly:C\n\x0cexperimental\x18\x89\x9e\x03\x20\x01\
    (\x08\x12\x1d.google.protobuf.FieldOptionsR\x0cexperimentalB4\n#com.sato\
    shilabs.trezor.lib.protobufB\rTrezorMessage\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
